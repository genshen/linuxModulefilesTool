package main

import (
	"os"
	"log"
	"path"
	"path/filepath"
	"io/ioutil"
	"text/template"
	"gopkg.in/yaml.v2"
)

const CONFIG_PATH = "modulefiles.yaml"
const Info = "[Info]DO NOT modify this file directly,this file was generated by module files tools, by genshen(genshenchu@gmail.com)"

var moduleFilesConfig struct {
	LastModifiedBy string `yaml:"last_modified_by"`
	LastModified   string `yaml:"last_modified"`
	Config         Config `yaml:"configure"`
}

type Config struct {
	ReleasePrefix  string               `yaml:"release_prefix"`
	TemplatePrefix string               `yaml:"template_prefix"`
	Items          map[string]Item               `yaml:"items"`
}

type Item struct {
	ModuleName     string                 `yaml:"module_name"`
	ModuleAlias    string                 `yaml:"module_alias"`
	Tag            string                 `yaml:"tag"`
	Version        string                 `yaml:"version"`
	Description    string                 `yaml:"description"`
	Home           string                 `yaml:"home"`
	TemplatePath   string                 `yaml:"template_name"`
	AdditionalData map[string]string     `yaml:"additional"`
}

var pwd string

func init() {
	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		log.Fatal(err)
	}
	pwd = dir
}

func main() {
	f, err := os.Open(CONFIG_PATH)
	if err != nil {
		log.Fatal(err)
	}
	data, err := ioutil.ReadAll(f)
	if err != nil {
		log.Fatal(err)
	}
	err = yaml.Unmarshal([]byte(data), &moduleFilesConfig)
	if err != nil {
		log.Fatalf("error: %v", err)
	}

	for _, item := range moduleFilesConfig.Config.Items {
		var target = moduleFilesConfig.Config.ReleasePrefix + item.ModuleName
		if err := os.MkdirAll(path.Dir(target), os.ModePerm); err != nil {
			log.Fatal("error:", err)
		}
		if file, err := os.Create(target); err != nil {
			log.Fatal("error:", err)
		} else { //generate modules files
			if s1, err := template.ParseFiles(moduleFilesConfig.Config.TemplatePrefix + item.TemplatePath); err != nil { //todo
				log.Fatal("parse template file error:", err)
			} else {
				//todo if the tag in temprate does not appear in item.Data,it will cause <no value>
				item.AdditionalData["module_name"] = item.ModuleName //e.g. gcc/5.1.0
				item.AdditionalData["tag"] = item.Tag                //for conflict
				item.AdditionalData["version"] = item.Version
				item.AdditionalData["description"] = item.Description
				item.AdditionalData["home"] = item.Home
				item.AdditionalData["info"] = Info
				s1.Execute(file, item.AdditionalData)
				log.Println("generated module file:", item.ModuleName, "(", item.ModuleAlias, ")")
			}
		}
	}

	if moduleFilesConfig.Config.ReleasePrefix == "" {
		log.Println(len(moduleFilesConfig.Config.Items), "module files were released to:", pwd)
	} else {
		log.Println(len(moduleFilesConfig.Config.Items), "module files were released to:", moduleFilesConfig.Config.ReleasePrefix)
	}

}
