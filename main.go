package main

import (
	"os"
	"log"
	"path"
	"path/filepath"
	"io/ioutil"
	"text/template"
	"encoding/json"
)

const CONFIG_PATH = "modulefiles.json"
const Info = "[Info]DO NOT modify this file directly,this file was generated by module files tools, by genshen(genshenchu@gmail.com)"

var moduleFilesConfig struct {
	LastModifiedBy string `json:"last_modified_by"`
	LastModified   string `json:"last_modified"`
	Config         Config `json:"configure"`
}

type Config struct {
	ReleasePrefix  string `json:"release_prefix"`
	TemplatePrefix string `json:"template_prefix"`
	Items          []Item `json:"items"`
}

type Item struct {
	ModuleName   string                 `json:"module_name"`
	ModuleAlias  string                 `json:"module_alias"`
	ModuleRoot   string                 `json:"module_root"`
	Version      string                 `json:"version"`
	Description  string                 `json:"description"`
	Home         string                 `json:"home"`
	TemplatePath string                 `json:"template_name"`
	Data         map[string]string     `json:"data"`
}

var pwd string

func init() {
	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		log.Fatal(err)
	}
	pwd = dir
}

func main() {

	//f, err := os.Open(CONFIG_PATH)
	//if err != nil {
	//	log.Fatal(err)
	//}
	//config, err := ioutil.ReadAll(f)
	//if err != nil {
	//	log.Fatal(err)
	//}
	//if err := json.Unmarshal(config, &moduleFilesConfig); err != nil {
	//	log.Fatalf("JSON unmarshaling failed: %s", err)
	//}
	//
	//log.Println(len(moduleFilesConfig.Config.Items))
	//
	//for _, item := range moduleFilesConfig.Config.Items {
	//	var target = moduleFilesConfig.Config.ReleasePrefix + item.ModuleName
	//	if err := os.MkdirAll(path.Dir(target), os.ModePerm); err != nil {
	//		log.Fatal("error:", err)
	//	}
	//	if file, err := os.Create(target); err != nil {
	//		log.Fatal("error:", err)
	//	} else { //generate modules files
	//		if s1, err := template.ParseFiles(moduleFilesConfig.Config.TemplatePrefix + item.TemplatePath); err != nil { //todo
	//			log.Fatal("parse template file error:", err)
	//		} else {
	//			//todo if the tag in temprate does not appear in item.Data,it will cause <no value>
	//			item.Data["module_name"] = item.ModuleName //e.g. gcc/5.1.0
	//			item.Data["module_root"] = item.ModuleRoot //e.g. gcc  (just dir)
	//			item.Data["version"] = item.Version
	//			item.Data["description"] = item.Description
	//			item.Data["home"] = item.Home
	//			item.Data["info"] = Info
	//			s1.Execute(file, item.Data)
	//			log.Println("generated module file:", item.ModuleName, "(", item.ModuleAlias, ")")
	//		}
	//	}
	//}
	//
	//if moduleFilesConfig.Config.ReleasePrefix == "" {
	//	log.Println(len(moduleFilesConfig.Config.Items), "module files were released to:", pwd)
	//} else {
	//	log.Println(len(moduleFilesConfig.Config.Items), "module files were released to:", moduleFilesConfig.Config.ReleasePrefix)
	//}

}
